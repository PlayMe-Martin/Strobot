// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SignalMessages.proto

public final class SignalMessages {
  private SignalMessages() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface SignalLevelOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required int32 signalID = 1 [default = 1];
    /**
     * <code>required int32 signalID = 1 [default = 1];</code>
     */
    boolean hasSignalID();
    /**
     * <code>required int32 signalID = 1 [default = 1];</code>
     */
    int getSignalID();

    // required float signalLevel = 2 [default = 0];
    /**
     * <code>required float signalLevel = 2 [default = 0];</code>
     */
    boolean hasSignalLevel();
    /**
     * <code>required float signalLevel = 2 [default = 0];</code>
     */
    float getSignalLevel();
  }
  /**
   * Protobuf type {@code SignalLevel}
   *
   * <pre>
   * Current signal average value
   * </pre>
   */
  public static final class SignalLevel extends
      com.google.protobuf.GeneratedMessage
      implements SignalLevelOrBuilder {
    // Use SignalLevel.newBuilder() to construct.
    private SignalLevel(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private SignalLevel(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final SignalLevel defaultInstance;
    public static SignalLevel getDefaultInstance() {
      return defaultInstance;
    }

    public SignalLevel getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private SignalLevel(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              signalID_ = input.readInt32();
              break;
            }
            case 21: {
              bitField0_ |= 0x00000002;
              signalLevel_ = input.readFloat();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return SignalMessages.internal_static_SignalLevel_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return SignalMessages.internal_static_SignalLevel_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              SignalMessages.SignalLevel.class, SignalMessages.SignalLevel.Builder.class);
    }

    public static com.google.protobuf.Parser<SignalLevel> PARSER =
        new com.google.protobuf.AbstractParser<SignalLevel>() {
      public SignalLevel parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SignalLevel(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<SignalLevel> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required int32 signalID = 1 [default = 1];
    public static final int SIGNALID_FIELD_NUMBER = 1;
    private int signalID_;
    /**
     * <code>required int32 signalID = 1 [default = 1];</code>
     */
    public boolean hasSignalID() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 signalID = 1 [default = 1];</code>
     */
    public int getSignalID() {
      return signalID_;
    }

    // required float signalLevel = 2 [default = 0];
    public static final int SIGNALLEVEL_FIELD_NUMBER = 2;
    private float signalLevel_;
    /**
     * <code>required float signalLevel = 2 [default = 0];</code>
     */
    public boolean hasSignalLevel() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required float signalLevel = 2 [default = 0];</code>
     */
    public float getSignalLevel() {
      return signalLevel_;
    }

    private void initFields() {
      signalID_ = 1;
      signalLevel_ = 0F;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasSignalID()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSignalLevel()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, signalID_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(2, signalLevel_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, signalID_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, signalLevel_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static SignalMessages.SignalLevel parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SignalMessages.SignalLevel parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SignalMessages.SignalLevel parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SignalMessages.SignalLevel parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SignalMessages.SignalLevel parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static SignalMessages.SignalLevel parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static SignalMessages.SignalLevel parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static SignalMessages.SignalLevel parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static SignalMessages.SignalLevel parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static SignalMessages.SignalLevel parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(SignalMessages.SignalLevel prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code SignalLevel}
     *
     * <pre>
     * Current signal average value
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements SignalMessages.SignalLevelOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return SignalMessages.internal_static_SignalLevel_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return SignalMessages.internal_static_SignalLevel_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                SignalMessages.SignalLevel.class, SignalMessages.SignalLevel.Builder.class);
      }

      // Construct using SignalMessages.SignalLevel.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        signalID_ = 1;
        bitField0_ = (bitField0_ & ~0x00000001);
        signalLevel_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return SignalMessages.internal_static_SignalLevel_descriptor;
      }

      public SignalMessages.SignalLevel getDefaultInstanceForType() {
        return SignalMessages.SignalLevel.getDefaultInstance();
      }

      public SignalMessages.SignalLevel build() {
        SignalMessages.SignalLevel result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public SignalMessages.SignalLevel buildPartial() {
        SignalMessages.SignalLevel result = new SignalMessages.SignalLevel(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.signalID_ = signalID_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.signalLevel_ = signalLevel_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof SignalMessages.SignalLevel) {
          return mergeFrom((SignalMessages.SignalLevel)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(SignalMessages.SignalLevel other) {
        if (other == SignalMessages.SignalLevel.getDefaultInstance()) return this;
        if (other.hasSignalID()) {
          setSignalID(other.getSignalID());
        }
        if (other.hasSignalLevel()) {
          setSignalLevel(other.getSignalLevel());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasSignalID()) {
          
          return false;
        }
        if (!hasSignalLevel()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        SignalMessages.SignalLevel parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (SignalMessages.SignalLevel) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required int32 signalID = 1 [default = 1];
      private int signalID_ = 1;
      /**
       * <code>required int32 signalID = 1 [default = 1];</code>
       */
      public boolean hasSignalID() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 signalID = 1 [default = 1];</code>
       */
      public int getSignalID() {
        return signalID_;
      }
      /**
       * <code>required int32 signalID = 1 [default = 1];</code>
       */
      public Builder setSignalID(int value) {
        bitField0_ |= 0x00000001;
        signalID_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 signalID = 1 [default = 1];</code>
       */
      public Builder clearSignalID() {
        bitField0_ = (bitField0_ & ~0x00000001);
        signalID_ = 1;
        onChanged();
        return this;
      }

      // required float signalLevel = 2 [default = 0];
      private float signalLevel_ ;
      /**
       * <code>required float signalLevel = 2 [default = 0];</code>
       */
      public boolean hasSignalLevel() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required float signalLevel = 2 [default = 0];</code>
       */
      public float getSignalLevel() {
        return signalLevel_;
      }
      /**
       * <code>required float signalLevel = 2 [default = 0];</code>
       */
      public Builder setSignalLevel(float value) {
        bitField0_ |= 0x00000002;
        signalLevel_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float signalLevel = 2 [default = 0];</code>
       */
      public Builder clearSignalLevel() {
        bitField0_ = (bitField0_ & ~0x00000002);
        signalLevel_ = 0F;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:SignalLevel)
    }

    static {
      defaultInstance = new SignalLevel(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:SignalLevel)
  }

  public interface SignalInstantValOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required int32 signalID = 1 [default = 1];
    /**
     * <code>required int32 signalID = 1 [default = 1];</code>
     */
    boolean hasSignalID();
    /**
     * <code>required int32 signalID = 1 [default = 1];</code>
     */
    int getSignalID();

    // required float signalInstantVal = 2 [default = 0];
    /**
     * <code>required float signalInstantVal = 2 [default = 0];</code>
     */
    boolean hasSignalInstantVal();
    /**
     * <code>required float signalInstantVal = 2 [default = 0];</code>
     */
    float getSignalInstantVal();
  }
  /**
   * Protobuf type {@code SignalInstantVal}
   *
   * <pre>
   * Instantaneous signal value (not averaged)
   * </pre>
   */
  public static final class SignalInstantVal extends
      com.google.protobuf.GeneratedMessage
      implements SignalInstantValOrBuilder {
    // Use SignalInstantVal.newBuilder() to construct.
    private SignalInstantVal(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private SignalInstantVal(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final SignalInstantVal defaultInstance;
    public static SignalInstantVal getDefaultInstance() {
      return defaultInstance;
    }

    public SignalInstantVal getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private SignalInstantVal(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              signalID_ = input.readInt32();
              break;
            }
            case 21: {
              bitField0_ |= 0x00000002;
              signalInstantVal_ = input.readFloat();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return SignalMessages.internal_static_SignalInstantVal_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return SignalMessages.internal_static_SignalInstantVal_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              SignalMessages.SignalInstantVal.class, SignalMessages.SignalInstantVal.Builder.class);
    }

    public static com.google.protobuf.Parser<SignalInstantVal> PARSER =
        new com.google.protobuf.AbstractParser<SignalInstantVal>() {
      public SignalInstantVal parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SignalInstantVal(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<SignalInstantVal> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required int32 signalID = 1 [default = 1];
    public static final int SIGNALID_FIELD_NUMBER = 1;
    private int signalID_;
    /**
     * <code>required int32 signalID = 1 [default = 1];</code>
     */
    public boolean hasSignalID() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 signalID = 1 [default = 1];</code>
     */
    public int getSignalID() {
      return signalID_;
    }

    // required float signalInstantVal = 2 [default = 0];
    public static final int SIGNALINSTANTVAL_FIELD_NUMBER = 2;
    private float signalInstantVal_;
    /**
     * <code>required float signalInstantVal = 2 [default = 0];</code>
     */
    public boolean hasSignalInstantVal() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required float signalInstantVal = 2 [default = 0];</code>
     */
    public float getSignalInstantVal() {
      return signalInstantVal_;
    }

    private void initFields() {
      signalID_ = 1;
      signalInstantVal_ = 0F;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasSignalID()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSignalInstantVal()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, signalID_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(2, signalInstantVal_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, signalID_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, signalInstantVal_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static SignalMessages.SignalInstantVal parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SignalMessages.SignalInstantVal parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SignalMessages.SignalInstantVal parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SignalMessages.SignalInstantVal parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SignalMessages.SignalInstantVal parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static SignalMessages.SignalInstantVal parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static SignalMessages.SignalInstantVal parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static SignalMessages.SignalInstantVal parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static SignalMessages.SignalInstantVal parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static SignalMessages.SignalInstantVal parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(SignalMessages.SignalInstantVal prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code SignalInstantVal}
     *
     * <pre>
     * Instantaneous signal value (not averaged)
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements SignalMessages.SignalInstantValOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return SignalMessages.internal_static_SignalInstantVal_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return SignalMessages.internal_static_SignalInstantVal_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                SignalMessages.SignalInstantVal.class, SignalMessages.SignalInstantVal.Builder.class);
      }

      // Construct using SignalMessages.SignalInstantVal.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        signalID_ = 1;
        bitField0_ = (bitField0_ & ~0x00000001);
        signalInstantVal_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return SignalMessages.internal_static_SignalInstantVal_descriptor;
      }

      public SignalMessages.SignalInstantVal getDefaultInstanceForType() {
        return SignalMessages.SignalInstantVal.getDefaultInstance();
      }

      public SignalMessages.SignalInstantVal build() {
        SignalMessages.SignalInstantVal result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public SignalMessages.SignalInstantVal buildPartial() {
        SignalMessages.SignalInstantVal result = new SignalMessages.SignalInstantVal(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.signalID_ = signalID_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.signalInstantVal_ = signalInstantVal_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof SignalMessages.SignalInstantVal) {
          return mergeFrom((SignalMessages.SignalInstantVal)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(SignalMessages.SignalInstantVal other) {
        if (other == SignalMessages.SignalInstantVal.getDefaultInstance()) return this;
        if (other.hasSignalID()) {
          setSignalID(other.getSignalID());
        }
        if (other.hasSignalInstantVal()) {
          setSignalInstantVal(other.getSignalInstantVal());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasSignalID()) {
          
          return false;
        }
        if (!hasSignalInstantVal()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        SignalMessages.SignalInstantVal parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (SignalMessages.SignalInstantVal) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required int32 signalID = 1 [default = 1];
      private int signalID_ = 1;
      /**
       * <code>required int32 signalID = 1 [default = 1];</code>
       */
      public boolean hasSignalID() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 signalID = 1 [default = 1];</code>
       */
      public int getSignalID() {
        return signalID_;
      }
      /**
       * <code>required int32 signalID = 1 [default = 1];</code>
       */
      public Builder setSignalID(int value) {
        bitField0_ |= 0x00000001;
        signalID_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 signalID = 1 [default = 1];</code>
       */
      public Builder clearSignalID() {
        bitField0_ = (bitField0_ & ~0x00000001);
        signalID_ = 1;
        onChanged();
        return this;
      }

      // required float signalInstantVal = 2 [default = 0];
      private float signalInstantVal_ ;
      /**
       * <code>required float signalInstantVal = 2 [default = 0];</code>
       */
      public boolean hasSignalInstantVal() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required float signalInstantVal = 2 [default = 0];</code>
       */
      public float getSignalInstantVal() {
        return signalInstantVal_;
      }
      /**
       * <code>required float signalInstantVal = 2 [default = 0];</code>
       */
      public Builder setSignalInstantVal(float value) {
        bitField0_ |= 0x00000002;
        signalInstantVal_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float signalInstantVal = 2 [default = 0];</code>
       */
      public Builder clearSignalInstantVal() {
        bitField0_ = (bitField0_ & ~0x00000002);
        signalInstantVal_ = 0F;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:SignalInstantVal)
    }

    static {
      defaultInstance = new SignalInstantVal(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:SignalInstantVal)
  }

  public interface ImpulseOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required int32 signalID = 1 [default = 1];
    /**
     * <code>required int32 signalID = 1 [default = 1];</code>
     */
    boolean hasSignalID();
    /**
     * <code>required int32 signalID = 1 [default = 1];</code>
     */
    int getSignalID();
  }
  /**
   * Protobuf type {@code Impulse}
   *
   * <pre>
   * Beat detection notification
   * </pre>
   */
  public static final class Impulse extends
      com.google.protobuf.GeneratedMessage
      implements ImpulseOrBuilder {
    // Use Impulse.newBuilder() to construct.
    private Impulse(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Impulse(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Impulse defaultInstance;
    public static Impulse getDefaultInstance() {
      return defaultInstance;
    }

    public Impulse getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Impulse(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              signalID_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return SignalMessages.internal_static_Impulse_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return SignalMessages.internal_static_Impulse_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              SignalMessages.Impulse.class, SignalMessages.Impulse.Builder.class);
    }

    public static com.google.protobuf.Parser<Impulse> PARSER =
        new com.google.protobuf.AbstractParser<Impulse>() {
      public Impulse parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Impulse(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Impulse> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required int32 signalID = 1 [default = 1];
    public static final int SIGNALID_FIELD_NUMBER = 1;
    private int signalID_;
    /**
     * <code>required int32 signalID = 1 [default = 1];</code>
     */
    public boolean hasSignalID() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 signalID = 1 [default = 1];</code>
     */
    public int getSignalID() {
      return signalID_;
    }

    private void initFields() {
      signalID_ = 1;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasSignalID()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, signalID_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, signalID_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static SignalMessages.Impulse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SignalMessages.Impulse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SignalMessages.Impulse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SignalMessages.Impulse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SignalMessages.Impulse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static SignalMessages.Impulse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static SignalMessages.Impulse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static SignalMessages.Impulse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static SignalMessages.Impulse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static SignalMessages.Impulse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(SignalMessages.Impulse prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Impulse}
     *
     * <pre>
     * Beat detection notification
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements SignalMessages.ImpulseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return SignalMessages.internal_static_Impulse_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return SignalMessages.internal_static_Impulse_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                SignalMessages.Impulse.class, SignalMessages.Impulse.Builder.class);
      }

      // Construct using SignalMessages.Impulse.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        signalID_ = 1;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return SignalMessages.internal_static_Impulse_descriptor;
      }

      public SignalMessages.Impulse getDefaultInstanceForType() {
        return SignalMessages.Impulse.getDefaultInstance();
      }

      public SignalMessages.Impulse build() {
        SignalMessages.Impulse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public SignalMessages.Impulse buildPartial() {
        SignalMessages.Impulse result = new SignalMessages.Impulse(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.signalID_ = signalID_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof SignalMessages.Impulse) {
          return mergeFrom((SignalMessages.Impulse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(SignalMessages.Impulse other) {
        if (other == SignalMessages.Impulse.getDefaultInstance()) return this;
        if (other.hasSignalID()) {
          setSignalID(other.getSignalID());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasSignalID()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        SignalMessages.Impulse parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (SignalMessages.Impulse) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required int32 signalID = 1 [default = 1];
      private int signalID_ = 1;
      /**
       * <code>required int32 signalID = 1 [default = 1];</code>
       */
      public boolean hasSignalID() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 signalID = 1 [default = 1];</code>
       */
      public int getSignalID() {
        return signalID_;
      }
      /**
       * <code>required int32 signalID = 1 [default = 1];</code>
       */
      public Builder setSignalID(int value) {
        bitField0_ |= 0x00000001;
        signalID_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 signalID = 1 [default = 1];</code>
       */
      public Builder clearSignalID() {
        bitField0_ = (bitField0_ & ~0x00000001);
        signalID_ = 1;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:Impulse)
    }

    static {
      defaultInstance = new Impulse(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:Impulse)
  }

  public interface LinearFFTOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required int32 signalID = 1 [default = 1];
    /**
     * <code>required int32 signalID = 1 [default = 1];</code>
     */
    boolean hasSignalID();
    /**
     * <code>required int32 signalID = 1 [default = 1];</code>
     */
    int getSignalID();

    // required float fundamentalFreq = 2 [default = 0];
    /**
     * <code>required float fundamentalFreq = 2 [default = 0];</code>
     *
     * <pre>
     *Fundamental frequency detected in the FFT result
     * </pre>
     */
    boolean hasFundamentalFreq();
    /**
     * <code>required float fundamentalFreq = 2 [default = 0];</code>
     *
     * <pre>
     *Fundamental frequency detected in the FFT result
     * </pre>
     */
    float getFundamentalFreq();

    // repeated float data = 3 [packed = true];
    /**
     * <code>repeated float data = 3 [packed = true];</code>
     *
     * <pre>
     *Array of floats, one for each signal band (up to 2048 bands)
     * </pre>
     */
    java.util.List<java.lang.Float> getDataList();
    /**
     * <code>repeated float data = 3 [packed = true];</code>
     *
     * <pre>
     *Array of floats, one for each signal band (up to 2048 bands)
     * </pre>
     */
    int getDataCount();
    /**
     * <code>repeated float data = 3 [packed = true];</code>
     *
     * <pre>
     *Array of floats, one for each signal band (up to 2048 bands)
     * </pre>
     */
    float getData(int index);
  }
  /**
   * Protobuf type {@code LinearFFT}
   *
   * <pre>
   * Linear fast fourier transform
   * </pre>
   */
  public static final class LinearFFT extends
      com.google.protobuf.GeneratedMessage
      implements LinearFFTOrBuilder {
    // Use LinearFFT.newBuilder() to construct.
    private LinearFFT(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private LinearFFT(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final LinearFFT defaultInstance;
    public static LinearFFT getDefaultInstance() {
      return defaultInstance;
    }

    public LinearFFT getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private LinearFFT(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              signalID_ = input.readInt32();
              break;
            }
            case 21: {
              bitField0_ |= 0x00000002;
              fundamentalFreq_ = input.readFloat();
              break;
            }
            case 29: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                data_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000004;
              }
              data_.add(input.readFloat());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                data_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                data_.add(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          data_ = java.util.Collections.unmodifiableList(data_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return SignalMessages.internal_static_LinearFFT_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return SignalMessages.internal_static_LinearFFT_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              SignalMessages.LinearFFT.class, SignalMessages.LinearFFT.Builder.class);
    }

    public static com.google.protobuf.Parser<LinearFFT> PARSER =
        new com.google.protobuf.AbstractParser<LinearFFT>() {
      public LinearFFT parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new LinearFFT(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<LinearFFT> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required int32 signalID = 1 [default = 1];
    public static final int SIGNALID_FIELD_NUMBER = 1;
    private int signalID_;
    /**
     * <code>required int32 signalID = 1 [default = 1];</code>
     */
    public boolean hasSignalID() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 signalID = 1 [default = 1];</code>
     */
    public int getSignalID() {
      return signalID_;
    }

    // required float fundamentalFreq = 2 [default = 0];
    public static final int FUNDAMENTALFREQ_FIELD_NUMBER = 2;
    private float fundamentalFreq_;
    /**
     * <code>required float fundamentalFreq = 2 [default = 0];</code>
     *
     * <pre>
     *Fundamental frequency detected in the FFT result
     * </pre>
     */
    public boolean hasFundamentalFreq() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required float fundamentalFreq = 2 [default = 0];</code>
     *
     * <pre>
     *Fundamental frequency detected in the FFT result
     * </pre>
     */
    public float getFundamentalFreq() {
      return fundamentalFreq_;
    }

    // repeated float data = 3 [packed = true];
    public static final int DATA_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Float> data_;
    /**
     * <code>repeated float data = 3 [packed = true];</code>
     *
     * <pre>
     *Array of floats, one for each signal band (up to 2048 bands)
     * </pre>
     */
    public java.util.List<java.lang.Float>
        getDataList() {
      return data_;
    }
    /**
     * <code>repeated float data = 3 [packed = true];</code>
     *
     * <pre>
     *Array of floats, one for each signal band (up to 2048 bands)
     * </pre>
     */
    public int getDataCount() {
      return data_.size();
    }
    /**
     * <code>repeated float data = 3 [packed = true];</code>
     *
     * <pre>
     *Array of floats, one for each signal band (up to 2048 bands)
     * </pre>
     */
    public float getData(int index) {
      return data_.get(index);
    }
    private int dataMemoizedSerializedSize = -1;

    private void initFields() {
      signalID_ = 1;
      fundamentalFreq_ = 0F;
      data_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasSignalID()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasFundamentalFreq()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, signalID_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(2, fundamentalFreq_);
      }
      if (getDataList().size() > 0) {
        output.writeRawVarint32(26);
        output.writeRawVarint32(dataMemoizedSerializedSize);
      }
      for (int i = 0; i < data_.size(); i++) {
        output.writeFloatNoTag(data_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, signalID_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, fundamentalFreq_);
      }
      {
        int dataSize = 0;
        dataSize = 4 * getDataList().size();
        size += dataSize;
        if (!getDataList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        dataMemoizedSerializedSize = dataSize;
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static SignalMessages.LinearFFT parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SignalMessages.LinearFFT parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SignalMessages.LinearFFT parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SignalMessages.LinearFFT parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SignalMessages.LinearFFT parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static SignalMessages.LinearFFT parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static SignalMessages.LinearFFT parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static SignalMessages.LinearFFT parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static SignalMessages.LinearFFT parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static SignalMessages.LinearFFT parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(SignalMessages.LinearFFT prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code LinearFFT}
     *
     * <pre>
     * Linear fast fourier transform
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements SignalMessages.LinearFFTOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return SignalMessages.internal_static_LinearFFT_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return SignalMessages.internal_static_LinearFFT_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                SignalMessages.LinearFFT.class, SignalMessages.LinearFFT.Builder.class);
      }

      // Construct using SignalMessages.LinearFFT.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        signalID_ = 1;
        bitField0_ = (bitField0_ & ~0x00000001);
        fundamentalFreq_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000002);
        data_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return SignalMessages.internal_static_LinearFFT_descriptor;
      }

      public SignalMessages.LinearFFT getDefaultInstanceForType() {
        return SignalMessages.LinearFFT.getDefaultInstance();
      }

      public SignalMessages.LinearFFT build() {
        SignalMessages.LinearFFT result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public SignalMessages.LinearFFT buildPartial() {
        SignalMessages.LinearFFT result = new SignalMessages.LinearFFT(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.signalID_ = signalID_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.fundamentalFreq_ = fundamentalFreq_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          data_ = java.util.Collections.unmodifiableList(data_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.data_ = data_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof SignalMessages.LinearFFT) {
          return mergeFrom((SignalMessages.LinearFFT)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(SignalMessages.LinearFFT other) {
        if (other == SignalMessages.LinearFFT.getDefaultInstance()) return this;
        if (other.hasSignalID()) {
          setSignalID(other.getSignalID());
        }
        if (other.hasFundamentalFreq()) {
          setFundamentalFreq(other.getFundamentalFreq());
        }
        if (!other.data_.isEmpty()) {
          if (data_.isEmpty()) {
            data_ = other.data_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureDataIsMutable();
            data_.addAll(other.data_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasSignalID()) {
          
          return false;
        }
        if (!hasFundamentalFreq()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        SignalMessages.LinearFFT parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (SignalMessages.LinearFFT) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required int32 signalID = 1 [default = 1];
      private int signalID_ = 1;
      /**
       * <code>required int32 signalID = 1 [default = 1];</code>
       */
      public boolean hasSignalID() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 signalID = 1 [default = 1];</code>
       */
      public int getSignalID() {
        return signalID_;
      }
      /**
       * <code>required int32 signalID = 1 [default = 1];</code>
       */
      public Builder setSignalID(int value) {
        bitField0_ |= 0x00000001;
        signalID_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 signalID = 1 [default = 1];</code>
       */
      public Builder clearSignalID() {
        bitField0_ = (bitField0_ & ~0x00000001);
        signalID_ = 1;
        onChanged();
        return this;
      }

      // required float fundamentalFreq = 2 [default = 0];
      private float fundamentalFreq_ ;
      /**
       * <code>required float fundamentalFreq = 2 [default = 0];</code>
       *
       * <pre>
       *Fundamental frequency detected in the FFT result
       * </pre>
       */
      public boolean hasFundamentalFreq() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required float fundamentalFreq = 2 [default = 0];</code>
       *
       * <pre>
       *Fundamental frequency detected in the FFT result
       * </pre>
       */
      public float getFundamentalFreq() {
        return fundamentalFreq_;
      }
      /**
       * <code>required float fundamentalFreq = 2 [default = 0];</code>
       *
       * <pre>
       *Fundamental frequency detected in the FFT result
       * </pre>
       */
      public Builder setFundamentalFreq(float value) {
        bitField0_ |= 0x00000002;
        fundamentalFreq_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float fundamentalFreq = 2 [default = 0];</code>
       *
       * <pre>
       *Fundamental frequency detected in the FFT result
       * </pre>
       */
      public Builder clearFundamentalFreq() {
        bitField0_ = (bitField0_ & ~0x00000002);
        fundamentalFreq_ = 0F;
        onChanged();
        return this;
      }

      // repeated float data = 3 [packed = true];
      private java.util.List<java.lang.Float> data_ = java.util.Collections.emptyList();
      private void ensureDataIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          data_ = new java.util.ArrayList<java.lang.Float>(data_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated float data = 3 [packed = true];</code>
       *
       * <pre>
       *Array of floats, one for each signal band (up to 2048 bands)
       * </pre>
       */
      public java.util.List<java.lang.Float>
          getDataList() {
        return java.util.Collections.unmodifiableList(data_);
      }
      /**
       * <code>repeated float data = 3 [packed = true];</code>
       *
       * <pre>
       *Array of floats, one for each signal band (up to 2048 bands)
       * </pre>
       */
      public int getDataCount() {
        return data_.size();
      }
      /**
       * <code>repeated float data = 3 [packed = true];</code>
       *
       * <pre>
       *Array of floats, one for each signal band (up to 2048 bands)
       * </pre>
       */
      public float getData(int index) {
        return data_.get(index);
      }
      /**
       * <code>repeated float data = 3 [packed = true];</code>
       *
       * <pre>
       *Array of floats, one for each signal band (up to 2048 bands)
       * </pre>
       */
      public Builder setData(
          int index, float value) {
        ensureDataIsMutable();
        data_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float data = 3 [packed = true];</code>
       *
       * <pre>
       *Array of floats, one for each signal band (up to 2048 bands)
       * </pre>
       */
      public Builder addData(float value) {
        ensureDataIsMutable();
        data_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float data = 3 [packed = true];</code>
       *
       * <pre>
       *Array of floats, one for each signal band (up to 2048 bands)
       * </pre>
       */
      public Builder addAllData(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureDataIsMutable();
        super.addAll(values, data_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float data = 3 [packed = true];</code>
       *
       * <pre>
       *Array of floats, one for each signal band (up to 2048 bands)
       * </pre>
       */
      public Builder clearData() {
        data_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:LinearFFT)
    }

    static {
      defaultInstance = new LinearFFT(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:LinearFFT)
  }

  public interface LogFFTOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 signalID = 1 [default = 1];
    /**
     * <code>optional int32 signalID = 1 [default = 1];</code>
     */
    boolean hasSignalID();
    /**
     * <code>optional int32 signalID = 1 [default = 1];</code>
     */
    int getSignalID();

    // optional float fundamentalFreq = 2;
    /**
     * <code>optional float fundamentalFreq = 2;</code>
     *
     * <pre>
     *Fundamental frequency detected in the FFT result
     * </pre>
     */
    boolean hasFundamentalFreq();
    /**
     * <code>optional float fundamentalFreq = 2;</code>
     *
     * <pre>
     *Fundamental frequency detected in the FFT result
     * </pre>
     */
    float getFundamentalFreq();

    // optional float band1 = 3;
    /**
     * <code>optional float band1 = 3;</code>
     *
     * <pre>
     *Energy in the 0 to 11 Hz band
     * </pre>
     */
    boolean hasBand1();
    /**
     * <code>optional float band1 = 3;</code>
     *
     * <pre>
     *Energy in the 0 to 11 Hz band
     * </pre>
     */
    float getBand1();

    // optional float band2 = 4;
    /**
     * <code>optional float band2 = 4;</code>
     *
     * <pre>
     *Energy in the 11 to 22 Hz band
     * </pre>
     */
    boolean hasBand2();
    /**
     * <code>optional float band2 = 4;</code>
     *
     * <pre>
     *Energy in the 11 to 22 Hz band
     * </pre>
     */
    float getBand2();

    // optional float band3 = 5;
    /**
     * <code>optional float band3 = 5;</code>
     *
     * <pre>
     *Energy in the 22 to 43 Hz band
     * </pre>
     */
    boolean hasBand3();
    /**
     * <code>optional float band3 = 5;</code>
     *
     * <pre>
     *Energy in the 22 to 43 Hz band
     * </pre>
     */
    float getBand3();

    // optional float band4 = 6;
    /**
     * <code>optional float band4 = 6;</code>
     *
     * <pre>
     *Energy in the 43 to 86 Hz band
     * </pre>
     */
    boolean hasBand4();
    /**
     * <code>optional float band4 = 6;</code>
     *
     * <pre>
     *Energy in the 43 to 86 Hz band
     * </pre>
     */
    float getBand4();

    // optional float band5 = 7;
    /**
     * <code>optional float band5 = 7;</code>
     *
     * <pre>
     *Energy in the 86 to 172 Hz band
     * </pre>
     */
    boolean hasBand5();
    /**
     * <code>optional float band5 = 7;</code>
     *
     * <pre>
     *Energy in the 86 to 172 Hz band
     * </pre>
     */
    float getBand5();

    // optional float band6 = 8;
    /**
     * <code>optional float band6 = 8;</code>
     *
     * <pre>
     *Energy in the 172 to 344 Hz band
     * </pre>
     */
    boolean hasBand6();
    /**
     * <code>optional float band6 = 8;</code>
     *
     * <pre>
     *Energy in the 172 to 344 Hz band
     * </pre>
     */
    float getBand6();

    // optional float band7 = 9;
    /**
     * <code>optional float band7 = 9;</code>
     *
     * <pre>
     *Energy in the 344 to 689 Hz band
     * </pre>
     */
    boolean hasBand7();
    /**
     * <code>optional float band7 = 9;</code>
     *
     * <pre>
     *Energy in the 344 to 689 Hz band
     * </pre>
     */
    float getBand7();

    // optional float band8 = 10;
    /**
     * <code>optional float band8 = 10;</code>
     *
     * <pre>
     *Energy in the 689 to 1378 Hz band
     * </pre>
     */
    boolean hasBand8();
    /**
     * <code>optional float band8 = 10;</code>
     *
     * <pre>
     *Energy in the 689 to 1378 Hz band
     * </pre>
     */
    float getBand8();

    // optional float band9 = 11;
    /**
     * <code>optional float band9 = 11;</code>
     *
     * <pre>
     *Energy in the 1378 to 2756 Hz band
     * </pre>
     */
    boolean hasBand9();
    /**
     * <code>optional float band9 = 11;</code>
     *
     * <pre>
     *Energy in the 1378 to 2756 Hz band
     * </pre>
     */
    float getBand9();

    // optional float band10 = 12;
    /**
     * <code>optional float band10 = 12;</code>
     *
     * <pre>
     *Energy in the 2756 to 5512 Hz band
     * </pre>
     */
    boolean hasBand10();
    /**
     * <code>optional float band10 = 12;</code>
     *
     * <pre>
     *Energy in the 2756 to 5512 Hz band
     * </pre>
     */
    float getBand10();

    // optional float band11 = 13;
    /**
     * <code>optional float band11 = 13;</code>
     *
     * <pre>
     *Energy in the 5512 to 11025 Hz band
     * </pre>
     */
    boolean hasBand11();
    /**
     * <code>optional float band11 = 13;</code>
     *
     * <pre>
     *Energy in the 5512 to 11025 Hz band
     * </pre>
     */
    float getBand11();

    // optional float band12 = 14;
    /**
     * <code>optional float band12 = 14;</code>
     *
     * <pre>
     *Energy in the 11025 to 22050 Hz band
     * </pre>
     */
    boolean hasBand12();
    /**
     * <code>optional float band12 = 14;</code>
     *
     * <pre>
     *Energy in the 11025 to 22050 Hz band
     * </pre>
     */
    float getBand12();
  }
  /**
   * Protobuf type {@code LogFFT}
   *
   * <pre>
   * Log fast fourier transform, each band being one octave wide
   * </pre>
   */
  public static final class LogFFT extends
      com.google.protobuf.GeneratedMessage
      implements LogFFTOrBuilder {
    // Use LogFFT.newBuilder() to construct.
    private LogFFT(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private LogFFT(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final LogFFT defaultInstance;
    public static LogFFT getDefaultInstance() {
      return defaultInstance;
    }

    public LogFFT getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private LogFFT(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              signalID_ = input.readInt32();
              break;
            }
            case 21: {
              bitField0_ |= 0x00000002;
              fundamentalFreq_ = input.readFloat();
              break;
            }
            case 29: {
              bitField0_ |= 0x00000004;
              band1_ = input.readFloat();
              break;
            }
            case 37: {
              bitField0_ |= 0x00000008;
              band2_ = input.readFloat();
              break;
            }
            case 45: {
              bitField0_ |= 0x00000010;
              band3_ = input.readFloat();
              break;
            }
            case 53: {
              bitField0_ |= 0x00000020;
              band4_ = input.readFloat();
              break;
            }
            case 61: {
              bitField0_ |= 0x00000040;
              band5_ = input.readFloat();
              break;
            }
            case 69: {
              bitField0_ |= 0x00000080;
              band6_ = input.readFloat();
              break;
            }
            case 77: {
              bitField0_ |= 0x00000100;
              band7_ = input.readFloat();
              break;
            }
            case 85: {
              bitField0_ |= 0x00000200;
              band8_ = input.readFloat();
              break;
            }
            case 93: {
              bitField0_ |= 0x00000400;
              band9_ = input.readFloat();
              break;
            }
            case 101: {
              bitField0_ |= 0x00000800;
              band10_ = input.readFloat();
              break;
            }
            case 109: {
              bitField0_ |= 0x00001000;
              band11_ = input.readFloat();
              break;
            }
            case 117: {
              bitField0_ |= 0x00002000;
              band12_ = input.readFloat();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return SignalMessages.internal_static_LogFFT_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return SignalMessages.internal_static_LogFFT_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              SignalMessages.LogFFT.class, SignalMessages.LogFFT.Builder.class);
    }

    public static com.google.protobuf.Parser<LogFFT> PARSER =
        new com.google.protobuf.AbstractParser<LogFFT>() {
      public LogFFT parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new LogFFT(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<LogFFT> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 signalID = 1 [default = 1];
    public static final int SIGNALID_FIELD_NUMBER = 1;
    private int signalID_;
    /**
     * <code>optional int32 signalID = 1 [default = 1];</code>
     */
    public boolean hasSignalID() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 signalID = 1 [default = 1];</code>
     */
    public int getSignalID() {
      return signalID_;
    }

    // optional float fundamentalFreq = 2;
    public static final int FUNDAMENTALFREQ_FIELD_NUMBER = 2;
    private float fundamentalFreq_;
    /**
     * <code>optional float fundamentalFreq = 2;</code>
     *
     * <pre>
     *Fundamental frequency detected in the FFT result
     * </pre>
     */
    public boolean hasFundamentalFreq() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional float fundamentalFreq = 2;</code>
     *
     * <pre>
     *Fundamental frequency detected in the FFT result
     * </pre>
     */
    public float getFundamentalFreq() {
      return fundamentalFreq_;
    }

    // optional float band1 = 3;
    public static final int BAND1_FIELD_NUMBER = 3;
    private float band1_;
    /**
     * <code>optional float band1 = 3;</code>
     *
     * <pre>
     *Energy in the 0 to 11 Hz band
     * </pre>
     */
    public boolean hasBand1() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional float band1 = 3;</code>
     *
     * <pre>
     *Energy in the 0 to 11 Hz band
     * </pre>
     */
    public float getBand1() {
      return band1_;
    }

    // optional float band2 = 4;
    public static final int BAND2_FIELD_NUMBER = 4;
    private float band2_;
    /**
     * <code>optional float band2 = 4;</code>
     *
     * <pre>
     *Energy in the 11 to 22 Hz band
     * </pre>
     */
    public boolean hasBand2() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional float band2 = 4;</code>
     *
     * <pre>
     *Energy in the 11 to 22 Hz band
     * </pre>
     */
    public float getBand2() {
      return band2_;
    }

    // optional float band3 = 5;
    public static final int BAND3_FIELD_NUMBER = 5;
    private float band3_;
    /**
     * <code>optional float band3 = 5;</code>
     *
     * <pre>
     *Energy in the 22 to 43 Hz band
     * </pre>
     */
    public boolean hasBand3() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional float band3 = 5;</code>
     *
     * <pre>
     *Energy in the 22 to 43 Hz band
     * </pre>
     */
    public float getBand3() {
      return band3_;
    }

    // optional float band4 = 6;
    public static final int BAND4_FIELD_NUMBER = 6;
    private float band4_;
    /**
     * <code>optional float band4 = 6;</code>
     *
     * <pre>
     *Energy in the 43 to 86 Hz band
     * </pre>
     */
    public boolean hasBand4() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional float band4 = 6;</code>
     *
     * <pre>
     *Energy in the 43 to 86 Hz band
     * </pre>
     */
    public float getBand4() {
      return band4_;
    }

    // optional float band5 = 7;
    public static final int BAND5_FIELD_NUMBER = 7;
    private float band5_;
    /**
     * <code>optional float band5 = 7;</code>
     *
     * <pre>
     *Energy in the 86 to 172 Hz band
     * </pre>
     */
    public boolean hasBand5() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional float band5 = 7;</code>
     *
     * <pre>
     *Energy in the 86 to 172 Hz band
     * </pre>
     */
    public float getBand5() {
      return band5_;
    }

    // optional float band6 = 8;
    public static final int BAND6_FIELD_NUMBER = 8;
    private float band6_;
    /**
     * <code>optional float band6 = 8;</code>
     *
     * <pre>
     *Energy in the 172 to 344 Hz band
     * </pre>
     */
    public boolean hasBand6() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional float band6 = 8;</code>
     *
     * <pre>
     *Energy in the 172 to 344 Hz band
     * </pre>
     */
    public float getBand6() {
      return band6_;
    }

    // optional float band7 = 9;
    public static final int BAND7_FIELD_NUMBER = 9;
    private float band7_;
    /**
     * <code>optional float band7 = 9;</code>
     *
     * <pre>
     *Energy in the 344 to 689 Hz band
     * </pre>
     */
    public boolean hasBand7() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional float band7 = 9;</code>
     *
     * <pre>
     *Energy in the 344 to 689 Hz band
     * </pre>
     */
    public float getBand7() {
      return band7_;
    }

    // optional float band8 = 10;
    public static final int BAND8_FIELD_NUMBER = 10;
    private float band8_;
    /**
     * <code>optional float band8 = 10;</code>
     *
     * <pre>
     *Energy in the 689 to 1378 Hz band
     * </pre>
     */
    public boolean hasBand8() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional float band8 = 10;</code>
     *
     * <pre>
     *Energy in the 689 to 1378 Hz band
     * </pre>
     */
    public float getBand8() {
      return band8_;
    }

    // optional float band9 = 11;
    public static final int BAND9_FIELD_NUMBER = 11;
    private float band9_;
    /**
     * <code>optional float band9 = 11;</code>
     *
     * <pre>
     *Energy in the 1378 to 2756 Hz band
     * </pre>
     */
    public boolean hasBand9() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional float band9 = 11;</code>
     *
     * <pre>
     *Energy in the 1378 to 2756 Hz band
     * </pre>
     */
    public float getBand9() {
      return band9_;
    }

    // optional float band10 = 12;
    public static final int BAND10_FIELD_NUMBER = 12;
    private float band10_;
    /**
     * <code>optional float band10 = 12;</code>
     *
     * <pre>
     *Energy in the 2756 to 5512 Hz band
     * </pre>
     */
    public boolean hasBand10() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional float band10 = 12;</code>
     *
     * <pre>
     *Energy in the 2756 to 5512 Hz band
     * </pre>
     */
    public float getBand10() {
      return band10_;
    }

    // optional float band11 = 13;
    public static final int BAND11_FIELD_NUMBER = 13;
    private float band11_;
    /**
     * <code>optional float band11 = 13;</code>
     *
     * <pre>
     *Energy in the 5512 to 11025 Hz band
     * </pre>
     */
    public boolean hasBand11() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional float band11 = 13;</code>
     *
     * <pre>
     *Energy in the 5512 to 11025 Hz band
     * </pre>
     */
    public float getBand11() {
      return band11_;
    }

    // optional float band12 = 14;
    public static final int BAND12_FIELD_NUMBER = 14;
    private float band12_;
    /**
     * <code>optional float band12 = 14;</code>
     *
     * <pre>
     *Energy in the 11025 to 22050 Hz band
     * </pre>
     */
    public boolean hasBand12() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional float band12 = 14;</code>
     *
     * <pre>
     *Energy in the 11025 to 22050 Hz band
     * </pre>
     */
    public float getBand12() {
      return band12_;
    }

    private void initFields() {
      signalID_ = 1;
      fundamentalFreq_ = 0F;
      band1_ = 0F;
      band2_ = 0F;
      band3_ = 0F;
      band4_ = 0F;
      band5_ = 0F;
      band6_ = 0F;
      band7_ = 0F;
      band8_ = 0F;
      band9_ = 0F;
      band10_ = 0F;
      band11_ = 0F;
      band12_ = 0F;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, signalID_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(2, fundamentalFreq_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeFloat(3, band1_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeFloat(4, band2_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeFloat(5, band3_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeFloat(6, band4_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeFloat(7, band5_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeFloat(8, band6_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeFloat(9, band7_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeFloat(10, band8_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeFloat(11, band9_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeFloat(12, band10_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeFloat(13, band11_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeFloat(14, band12_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, signalID_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, fundamentalFreq_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(3, band1_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(4, band2_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(5, band3_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(6, band4_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(7, band5_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(8, band6_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(9, band7_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(10, band8_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(11, band9_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(12, band10_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(13, band11_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(14, band12_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static SignalMessages.LogFFT parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SignalMessages.LogFFT parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SignalMessages.LogFFT parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SignalMessages.LogFFT parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SignalMessages.LogFFT parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static SignalMessages.LogFFT parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static SignalMessages.LogFFT parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static SignalMessages.LogFFT parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static SignalMessages.LogFFT parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static SignalMessages.LogFFT parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(SignalMessages.LogFFT prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code LogFFT}
     *
     * <pre>
     * Log fast fourier transform, each band being one octave wide
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements SignalMessages.LogFFTOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return SignalMessages.internal_static_LogFFT_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return SignalMessages.internal_static_LogFFT_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                SignalMessages.LogFFT.class, SignalMessages.LogFFT.Builder.class);
      }

      // Construct using SignalMessages.LogFFT.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        signalID_ = 1;
        bitField0_ = (bitField0_ & ~0x00000001);
        fundamentalFreq_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000002);
        band1_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000004);
        band2_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000008);
        band3_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000010);
        band4_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000020);
        band5_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000040);
        band6_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000080);
        band7_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000100);
        band8_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000200);
        band9_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000400);
        band10_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000800);
        band11_ = 0F;
        bitField0_ = (bitField0_ & ~0x00001000);
        band12_ = 0F;
        bitField0_ = (bitField0_ & ~0x00002000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return SignalMessages.internal_static_LogFFT_descriptor;
      }

      public SignalMessages.LogFFT getDefaultInstanceForType() {
        return SignalMessages.LogFFT.getDefaultInstance();
      }

      public SignalMessages.LogFFT build() {
        SignalMessages.LogFFT result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public SignalMessages.LogFFT buildPartial() {
        SignalMessages.LogFFT result = new SignalMessages.LogFFT(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.signalID_ = signalID_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.fundamentalFreq_ = fundamentalFreq_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.band1_ = band1_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.band2_ = band2_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.band3_ = band3_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.band4_ = band4_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.band5_ = band5_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.band6_ = band6_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.band7_ = band7_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.band8_ = band8_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.band9_ = band9_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.band10_ = band10_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.band11_ = band11_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.band12_ = band12_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof SignalMessages.LogFFT) {
          return mergeFrom((SignalMessages.LogFFT)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(SignalMessages.LogFFT other) {
        if (other == SignalMessages.LogFFT.getDefaultInstance()) return this;
        if (other.hasSignalID()) {
          setSignalID(other.getSignalID());
        }
        if (other.hasFundamentalFreq()) {
          setFundamentalFreq(other.getFundamentalFreq());
        }
        if (other.hasBand1()) {
          setBand1(other.getBand1());
        }
        if (other.hasBand2()) {
          setBand2(other.getBand2());
        }
        if (other.hasBand3()) {
          setBand3(other.getBand3());
        }
        if (other.hasBand4()) {
          setBand4(other.getBand4());
        }
        if (other.hasBand5()) {
          setBand5(other.getBand5());
        }
        if (other.hasBand6()) {
          setBand6(other.getBand6());
        }
        if (other.hasBand7()) {
          setBand7(other.getBand7());
        }
        if (other.hasBand8()) {
          setBand8(other.getBand8());
        }
        if (other.hasBand9()) {
          setBand9(other.getBand9());
        }
        if (other.hasBand10()) {
          setBand10(other.getBand10());
        }
        if (other.hasBand11()) {
          setBand11(other.getBand11());
        }
        if (other.hasBand12()) {
          setBand12(other.getBand12());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        SignalMessages.LogFFT parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (SignalMessages.LogFFT) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 signalID = 1 [default = 1];
      private int signalID_ = 1;
      /**
       * <code>optional int32 signalID = 1 [default = 1];</code>
       */
      public boolean hasSignalID() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 signalID = 1 [default = 1];</code>
       */
      public int getSignalID() {
        return signalID_;
      }
      /**
       * <code>optional int32 signalID = 1 [default = 1];</code>
       */
      public Builder setSignalID(int value) {
        bitField0_ |= 0x00000001;
        signalID_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 signalID = 1 [default = 1];</code>
       */
      public Builder clearSignalID() {
        bitField0_ = (bitField0_ & ~0x00000001);
        signalID_ = 1;
        onChanged();
        return this;
      }

      // optional float fundamentalFreq = 2;
      private float fundamentalFreq_ ;
      /**
       * <code>optional float fundamentalFreq = 2;</code>
       *
       * <pre>
       *Fundamental frequency detected in the FFT result
       * </pre>
       */
      public boolean hasFundamentalFreq() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional float fundamentalFreq = 2;</code>
       *
       * <pre>
       *Fundamental frequency detected in the FFT result
       * </pre>
       */
      public float getFundamentalFreq() {
        return fundamentalFreq_;
      }
      /**
       * <code>optional float fundamentalFreq = 2;</code>
       *
       * <pre>
       *Fundamental frequency detected in the FFT result
       * </pre>
       */
      public Builder setFundamentalFreq(float value) {
        bitField0_ |= 0x00000002;
        fundamentalFreq_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float fundamentalFreq = 2;</code>
       *
       * <pre>
       *Fundamental frequency detected in the FFT result
       * </pre>
       */
      public Builder clearFundamentalFreq() {
        bitField0_ = (bitField0_ & ~0x00000002);
        fundamentalFreq_ = 0F;
        onChanged();
        return this;
      }

      // optional float band1 = 3;
      private float band1_ ;
      /**
       * <code>optional float band1 = 3;</code>
       *
       * <pre>
       *Energy in the 0 to 11 Hz band
       * </pre>
       */
      public boolean hasBand1() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional float band1 = 3;</code>
       *
       * <pre>
       *Energy in the 0 to 11 Hz band
       * </pre>
       */
      public float getBand1() {
        return band1_;
      }
      /**
       * <code>optional float band1 = 3;</code>
       *
       * <pre>
       *Energy in the 0 to 11 Hz band
       * </pre>
       */
      public Builder setBand1(float value) {
        bitField0_ |= 0x00000004;
        band1_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float band1 = 3;</code>
       *
       * <pre>
       *Energy in the 0 to 11 Hz band
       * </pre>
       */
      public Builder clearBand1() {
        bitField0_ = (bitField0_ & ~0x00000004);
        band1_ = 0F;
        onChanged();
        return this;
      }

      // optional float band2 = 4;
      private float band2_ ;
      /**
       * <code>optional float band2 = 4;</code>
       *
       * <pre>
       *Energy in the 11 to 22 Hz band
       * </pre>
       */
      public boolean hasBand2() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional float band2 = 4;</code>
       *
       * <pre>
       *Energy in the 11 to 22 Hz band
       * </pre>
       */
      public float getBand2() {
        return band2_;
      }
      /**
       * <code>optional float band2 = 4;</code>
       *
       * <pre>
       *Energy in the 11 to 22 Hz band
       * </pre>
       */
      public Builder setBand2(float value) {
        bitField0_ |= 0x00000008;
        band2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float band2 = 4;</code>
       *
       * <pre>
       *Energy in the 11 to 22 Hz band
       * </pre>
       */
      public Builder clearBand2() {
        bitField0_ = (bitField0_ & ~0x00000008);
        band2_ = 0F;
        onChanged();
        return this;
      }

      // optional float band3 = 5;
      private float band3_ ;
      /**
       * <code>optional float band3 = 5;</code>
       *
       * <pre>
       *Energy in the 22 to 43 Hz band
       * </pre>
       */
      public boolean hasBand3() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional float band3 = 5;</code>
       *
       * <pre>
       *Energy in the 22 to 43 Hz band
       * </pre>
       */
      public float getBand3() {
        return band3_;
      }
      /**
       * <code>optional float band3 = 5;</code>
       *
       * <pre>
       *Energy in the 22 to 43 Hz band
       * </pre>
       */
      public Builder setBand3(float value) {
        bitField0_ |= 0x00000010;
        band3_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float band3 = 5;</code>
       *
       * <pre>
       *Energy in the 22 to 43 Hz band
       * </pre>
       */
      public Builder clearBand3() {
        bitField0_ = (bitField0_ & ~0x00000010);
        band3_ = 0F;
        onChanged();
        return this;
      }

      // optional float band4 = 6;
      private float band4_ ;
      /**
       * <code>optional float band4 = 6;</code>
       *
       * <pre>
       *Energy in the 43 to 86 Hz band
       * </pre>
       */
      public boolean hasBand4() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional float band4 = 6;</code>
       *
       * <pre>
       *Energy in the 43 to 86 Hz band
       * </pre>
       */
      public float getBand4() {
        return band4_;
      }
      /**
       * <code>optional float band4 = 6;</code>
       *
       * <pre>
       *Energy in the 43 to 86 Hz band
       * </pre>
       */
      public Builder setBand4(float value) {
        bitField0_ |= 0x00000020;
        band4_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float band4 = 6;</code>
       *
       * <pre>
       *Energy in the 43 to 86 Hz band
       * </pre>
       */
      public Builder clearBand4() {
        bitField0_ = (bitField0_ & ~0x00000020);
        band4_ = 0F;
        onChanged();
        return this;
      }

      // optional float band5 = 7;
      private float band5_ ;
      /**
       * <code>optional float band5 = 7;</code>
       *
       * <pre>
       *Energy in the 86 to 172 Hz band
       * </pre>
       */
      public boolean hasBand5() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional float band5 = 7;</code>
       *
       * <pre>
       *Energy in the 86 to 172 Hz band
       * </pre>
       */
      public float getBand5() {
        return band5_;
      }
      /**
       * <code>optional float band5 = 7;</code>
       *
       * <pre>
       *Energy in the 86 to 172 Hz band
       * </pre>
       */
      public Builder setBand5(float value) {
        bitField0_ |= 0x00000040;
        band5_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float band5 = 7;</code>
       *
       * <pre>
       *Energy in the 86 to 172 Hz band
       * </pre>
       */
      public Builder clearBand5() {
        bitField0_ = (bitField0_ & ~0x00000040);
        band5_ = 0F;
        onChanged();
        return this;
      }

      // optional float band6 = 8;
      private float band6_ ;
      /**
       * <code>optional float band6 = 8;</code>
       *
       * <pre>
       *Energy in the 172 to 344 Hz band
       * </pre>
       */
      public boolean hasBand6() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional float band6 = 8;</code>
       *
       * <pre>
       *Energy in the 172 to 344 Hz band
       * </pre>
       */
      public float getBand6() {
        return band6_;
      }
      /**
       * <code>optional float band6 = 8;</code>
       *
       * <pre>
       *Energy in the 172 to 344 Hz band
       * </pre>
       */
      public Builder setBand6(float value) {
        bitField0_ |= 0x00000080;
        band6_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float band6 = 8;</code>
       *
       * <pre>
       *Energy in the 172 to 344 Hz band
       * </pre>
       */
      public Builder clearBand6() {
        bitField0_ = (bitField0_ & ~0x00000080);
        band6_ = 0F;
        onChanged();
        return this;
      }

      // optional float band7 = 9;
      private float band7_ ;
      /**
       * <code>optional float band7 = 9;</code>
       *
       * <pre>
       *Energy in the 344 to 689 Hz band
       * </pre>
       */
      public boolean hasBand7() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional float band7 = 9;</code>
       *
       * <pre>
       *Energy in the 344 to 689 Hz band
       * </pre>
       */
      public float getBand7() {
        return band7_;
      }
      /**
       * <code>optional float band7 = 9;</code>
       *
       * <pre>
       *Energy in the 344 to 689 Hz band
       * </pre>
       */
      public Builder setBand7(float value) {
        bitField0_ |= 0x00000100;
        band7_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float band7 = 9;</code>
       *
       * <pre>
       *Energy in the 344 to 689 Hz band
       * </pre>
       */
      public Builder clearBand7() {
        bitField0_ = (bitField0_ & ~0x00000100);
        band7_ = 0F;
        onChanged();
        return this;
      }

      // optional float band8 = 10;
      private float band8_ ;
      /**
       * <code>optional float band8 = 10;</code>
       *
       * <pre>
       *Energy in the 689 to 1378 Hz band
       * </pre>
       */
      public boolean hasBand8() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional float band8 = 10;</code>
       *
       * <pre>
       *Energy in the 689 to 1378 Hz band
       * </pre>
       */
      public float getBand8() {
        return band8_;
      }
      /**
       * <code>optional float band8 = 10;</code>
       *
       * <pre>
       *Energy in the 689 to 1378 Hz band
       * </pre>
       */
      public Builder setBand8(float value) {
        bitField0_ |= 0x00000200;
        band8_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float band8 = 10;</code>
       *
       * <pre>
       *Energy in the 689 to 1378 Hz band
       * </pre>
       */
      public Builder clearBand8() {
        bitField0_ = (bitField0_ & ~0x00000200);
        band8_ = 0F;
        onChanged();
        return this;
      }

      // optional float band9 = 11;
      private float band9_ ;
      /**
       * <code>optional float band9 = 11;</code>
       *
       * <pre>
       *Energy in the 1378 to 2756 Hz band
       * </pre>
       */
      public boolean hasBand9() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional float band9 = 11;</code>
       *
       * <pre>
       *Energy in the 1378 to 2756 Hz band
       * </pre>
       */
      public float getBand9() {
        return band9_;
      }
      /**
       * <code>optional float band9 = 11;</code>
       *
       * <pre>
       *Energy in the 1378 to 2756 Hz band
       * </pre>
       */
      public Builder setBand9(float value) {
        bitField0_ |= 0x00000400;
        band9_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float band9 = 11;</code>
       *
       * <pre>
       *Energy in the 1378 to 2756 Hz band
       * </pre>
       */
      public Builder clearBand9() {
        bitField0_ = (bitField0_ & ~0x00000400);
        band9_ = 0F;
        onChanged();
        return this;
      }

      // optional float band10 = 12;
      private float band10_ ;
      /**
       * <code>optional float band10 = 12;</code>
       *
       * <pre>
       *Energy in the 2756 to 5512 Hz band
       * </pre>
       */
      public boolean hasBand10() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional float band10 = 12;</code>
       *
       * <pre>
       *Energy in the 2756 to 5512 Hz band
       * </pre>
       */
      public float getBand10() {
        return band10_;
      }
      /**
       * <code>optional float band10 = 12;</code>
       *
       * <pre>
       *Energy in the 2756 to 5512 Hz band
       * </pre>
       */
      public Builder setBand10(float value) {
        bitField0_ |= 0x00000800;
        band10_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float band10 = 12;</code>
       *
       * <pre>
       *Energy in the 2756 to 5512 Hz band
       * </pre>
       */
      public Builder clearBand10() {
        bitField0_ = (bitField0_ & ~0x00000800);
        band10_ = 0F;
        onChanged();
        return this;
      }

      // optional float band11 = 13;
      private float band11_ ;
      /**
       * <code>optional float band11 = 13;</code>
       *
       * <pre>
       *Energy in the 5512 to 11025 Hz band
       * </pre>
       */
      public boolean hasBand11() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional float band11 = 13;</code>
       *
       * <pre>
       *Energy in the 5512 to 11025 Hz band
       * </pre>
       */
      public float getBand11() {
        return band11_;
      }
      /**
       * <code>optional float band11 = 13;</code>
       *
       * <pre>
       *Energy in the 5512 to 11025 Hz band
       * </pre>
       */
      public Builder setBand11(float value) {
        bitField0_ |= 0x00001000;
        band11_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float band11 = 13;</code>
       *
       * <pre>
       *Energy in the 5512 to 11025 Hz band
       * </pre>
       */
      public Builder clearBand11() {
        bitField0_ = (bitField0_ & ~0x00001000);
        band11_ = 0F;
        onChanged();
        return this;
      }

      // optional float band12 = 14;
      private float band12_ ;
      /**
       * <code>optional float band12 = 14;</code>
       *
       * <pre>
       *Energy in the 11025 to 22050 Hz band
       * </pre>
       */
      public boolean hasBand12() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional float band12 = 14;</code>
       *
       * <pre>
       *Energy in the 11025 to 22050 Hz band
       * </pre>
       */
      public float getBand12() {
        return band12_;
      }
      /**
       * <code>optional float band12 = 14;</code>
       *
       * <pre>
       *Energy in the 11025 to 22050 Hz band
       * </pre>
       */
      public Builder setBand12(float value) {
        bitField0_ |= 0x00002000;
        band12_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float band12 = 14;</code>
       *
       * <pre>
       *Energy in the 11025 to 22050 Hz band
       * </pre>
       */
      public Builder clearBand12() {
        bitField0_ = (bitField0_ & ~0x00002000);
        band12_ = 0F;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:LogFFT)
    }

    static {
      defaultInstance = new LogFFT(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:LogFFT)
  }

  public interface TimeInfoOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required bool isPlaying = 1 [default = false];
    /**
     * <code>required bool isPlaying = 1 [default = false];</code>
     */
    boolean hasIsPlaying();
    /**
     * <code>required bool isPlaying = 1 [default = false];</code>
     */
    boolean getIsPlaying();

    // required float tempo = 2 [default = 0];
    /**
     * <code>required float tempo = 2 [default = 0];</code>
     */
    boolean hasTempo();
    /**
     * <code>required float tempo = 2 [default = 0];</code>
     */
    float getTempo();

    // required float position = 3 [default = 0];
    /**
     * <code>required float position = 3 [default = 0];</code>
     *
     * <pre>
     *Current position, in pulses-per-quarter-note
     * </pre>
     */
    boolean hasPosition();
    /**
     * <code>required float position = 3 [default = 0];</code>
     *
     * <pre>
     *Current position, in pulses-per-quarter-note
     * </pre>
     */
    float getPosition();
  }
  /**
   * Protobuf type {@code TimeInfo}
   *
   * <pre>
   * Transport data : tempo / BPM
   * </pre>
   */
  public static final class TimeInfo extends
      com.google.protobuf.GeneratedMessage
      implements TimeInfoOrBuilder {
    // Use TimeInfo.newBuilder() to construct.
    private TimeInfo(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private TimeInfo(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final TimeInfo defaultInstance;
    public static TimeInfo getDefaultInstance() {
      return defaultInstance;
    }

    public TimeInfo getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private TimeInfo(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              isPlaying_ = input.readBool();
              break;
            }
            case 21: {
              bitField0_ |= 0x00000002;
              tempo_ = input.readFloat();
              break;
            }
            case 29: {
              bitField0_ |= 0x00000004;
              position_ = input.readFloat();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return SignalMessages.internal_static_TimeInfo_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return SignalMessages.internal_static_TimeInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              SignalMessages.TimeInfo.class, SignalMessages.TimeInfo.Builder.class);
    }

    public static com.google.protobuf.Parser<TimeInfo> PARSER =
        new com.google.protobuf.AbstractParser<TimeInfo>() {
      public TimeInfo parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TimeInfo(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<TimeInfo> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required bool isPlaying = 1 [default = false];
    public static final int ISPLAYING_FIELD_NUMBER = 1;
    private boolean isPlaying_;
    /**
     * <code>required bool isPlaying = 1 [default = false];</code>
     */
    public boolean hasIsPlaying() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required bool isPlaying = 1 [default = false];</code>
     */
    public boolean getIsPlaying() {
      return isPlaying_;
    }

    // required float tempo = 2 [default = 0];
    public static final int TEMPO_FIELD_NUMBER = 2;
    private float tempo_;
    /**
     * <code>required float tempo = 2 [default = 0];</code>
     */
    public boolean hasTempo() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required float tempo = 2 [default = 0];</code>
     */
    public float getTempo() {
      return tempo_;
    }

    // required float position = 3 [default = 0];
    public static final int POSITION_FIELD_NUMBER = 3;
    private float position_;
    /**
     * <code>required float position = 3 [default = 0];</code>
     *
     * <pre>
     *Current position, in pulses-per-quarter-note
     * </pre>
     */
    public boolean hasPosition() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required float position = 3 [default = 0];</code>
     *
     * <pre>
     *Current position, in pulses-per-quarter-note
     * </pre>
     */
    public float getPosition() {
      return position_;
    }

    private void initFields() {
      isPlaying_ = false;
      tempo_ = 0F;
      position_ = 0F;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasIsPlaying()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasTempo()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPosition()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBool(1, isPlaying_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(2, tempo_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeFloat(3, position_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, isPlaying_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, tempo_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(3, position_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static SignalMessages.TimeInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SignalMessages.TimeInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SignalMessages.TimeInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SignalMessages.TimeInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SignalMessages.TimeInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static SignalMessages.TimeInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static SignalMessages.TimeInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static SignalMessages.TimeInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static SignalMessages.TimeInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static SignalMessages.TimeInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(SignalMessages.TimeInfo prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code TimeInfo}
     *
     * <pre>
     * Transport data : tempo / BPM
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements SignalMessages.TimeInfoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return SignalMessages.internal_static_TimeInfo_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return SignalMessages.internal_static_TimeInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                SignalMessages.TimeInfo.class, SignalMessages.TimeInfo.Builder.class);
      }

      // Construct using SignalMessages.TimeInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        isPlaying_ = false;
        bitField0_ = (bitField0_ & ~0x00000001);
        tempo_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000002);
        position_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return SignalMessages.internal_static_TimeInfo_descriptor;
      }

      public SignalMessages.TimeInfo getDefaultInstanceForType() {
        return SignalMessages.TimeInfo.getDefaultInstance();
      }

      public SignalMessages.TimeInfo build() {
        SignalMessages.TimeInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public SignalMessages.TimeInfo buildPartial() {
        SignalMessages.TimeInfo result = new SignalMessages.TimeInfo(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.isPlaying_ = isPlaying_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.tempo_ = tempo_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.position_ = position_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof SignalMessages.TimeInfo) {
          return mergeFrom((SignalMessages.TimeInfo)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(SignalMessages.TimeInfo other) {
        if (other == SignalMessages.TimeInfo.getDefaultInstance()) return this;
        if (other.hasIsPlaying()) {
          setIsPlaying(other.getIsPlaying());
        }
        if (other.hasTempo()) {
          setTempo(other.getTempo());
        }
        if (other.hasPosition()) {
          setPosition(other.getPosition());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasIsPlaying()) {
          
          return false;
        }
        if (!hasTempo()) {
          
          return false;
        }
        if (!hasPosition()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        SignalMessages.TimeInfo parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (SignalMessages.TimeInfo) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required bool isPlaying = 1 [default = false];
      private boolean isPlaying_ ;
      /**
       * <code>required bool isPlaying = 1 [default = false];</code>
       */
      public boolean hasIsPlaying() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required bool isPlaying = 1 [default = false];</code>
       */
      public boolean getIsPlaying() {
        return isPlaying_;
      }
      /**
       * <code>required bool isPlaying = 1 [default = false];</code>
       */
      public Builder setIsPlaying(boolean value) {
        bitField0_ |= 0x00000001;
        isPlaying_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool isPlaying = 1 [default = false];</code>
       */
      public Builder clearIsPlaying() {
        bitField0_ = (bitField0_ & ~0x00000001);
        isPlaying_ = false;
        onChanged();
        return this;
      }

      // required float tempo = 2 [default = 0];
      private float tempo_ ;
      /**
       * <code>required float tempo = 2 [default = 0];</code>
       */
      public boolean hasTempo() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required float tempo = 2 [default = 0];</code>
       */
      public float getTempo() {
        return tempo_;
      }
      /**
       * <code>required float tempo = 2 [default = 0];</code>
       */
      public Builder setTempo(float value) {
        bitField0_ |= 0x00000002;
        tempo_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float tempo = 2 [default = 0];</code>
       */
      public Builder clearTempo() {
        bitField0_ = (bitField0_ & ~0x00000002);
        tempo_ = 0F;
        onChanged();
        return this;
      }

      // required float position = 3 [default = 0];
      private float position_ ;
      /**
       * <code>required float position = 3 [default = 0];</code>
       *
       * <pre>
       *Current position, in pulses-per-quarter-note
       * </pre>
       */
      public boolean hasPosition() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required float position = 3 [default = 0];</code>
       *
       * <pre>
       *Current position, in pulses-per-quarter-note
       * </pre>
       */
      public float getPosition() {
        return position_;
      }
      /**
       * <code>required float position = 3 [default = 0];</code>
       *
       * <pre>
       *Current position, in pulses-per-quarter-note
       * </pre>
       */
      public Builder setPosition(float value) {
        bitField0_ |= 0x00000004;
        position_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float position = 3 [default = 0];</code>
       *
       * <pre>
       *Current position, in pulses-per-quarter-note
       * </pre>
       */
      public Builder clearPosition() {
        bitField0_ = (bitField0_ & ~0x00000004);
        position_ = 0F;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:TimeInfo)
    }

    static {
      defaultInstance = new TimeInfo(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:TimeInfo)
  }

  public interface MidiDataOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required int32 msgType = 1 [default = 1];
    /**
     * <code>required int32 msgType = 1 [default = 1];</code>
     */
    boolean hasMsgType();
    /**
     * <code>required int32 msgType = 1 [default = 1];</code>
     */
    int getMsgType();

    // required int32 channel = 2 [default = 1];
    /**
     * <code>required int32 channel = 2 [default = 1];</code>
     */
    boolean hasChannel();
    /**
     * <code>required int32 channel = 2 [default = 1];</code>
     */
    int getChannel();

    // required int32 data1 = 3 [default = 1];
    /**
     * <code>required int32 data1 = 3 [default = 1];</code>
     *
     * <pre>
     *Pitch or CC number
     * </pre>
     */
    boolean hasData1();
    /**
     * <code>required int32 data1 = 3 [default = 1];</code>
     *
     * <pre>
     *Pitch or CC number
     * </pre>
     */
    int getData1();

    // required int32 data2 = 4 [default = 1];
    /**
     * <code>required int32 data2 = 4 [default = 1];</code>
     *
     * <pre>
     *Velocity or value
     * </pre>
     */
    boolean hasData2();
    /**
     * <code>required int32 data2 = 4 [default = 1];</code>
     *
     * <pre>
     *Velocity or value
     * </pre>
     */
    int getData2();
  }
  /**
   * Protobuf type {@code MidiData}
   *
   * <pre>
   * Forward MIDI Data to Strobot
   * </pre>
   */
  public static final class MidiData extends
      com.google.protobuf.GeneratedMessage
      implements MidiDataOrBuilder {
    // Use MidiData.newBuilder() to construct.
    private MidiData(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private MidiData(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final MidiData defaultInstance;
    public static MidiData getDefaultInstance() {
      return defaultInstance;
    }

    public MidiData getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private MidiData(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              msgType_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              channel_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              data1_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              data2_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return SignalMessages.internal_static_MidiData_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return SignalMessages.internal_static_MidiData_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              SignalMessages.MidiData.class, SignalMessages.MidiData.Builder.class);
    }

    public static com.google.protobuf.Parser<MidiData> PARSER =
        new com.google.protobuf.AbstractParser<MidiData>() {
      public MidiData parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new MidiData(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<MidiData> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required int32 msgType = 1 [default = 1];
    public static final int MSGTYPE_FIELD_NUMBER = 1;
    private int msgType_;
    /**
     * <code>required int32 msgType = 1 [default = 1];</code>
     */
    public boolean hasMsgType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 msgType = 1 [default = 1];</code>
     */
    public int getMsgType() {
      return msgType_;
    }

    // required int32 channel = 2 [default = 1];
    public static final int CHANNEL_FIELD_NUMBER = 2;
    private int channel_;
    /**
     * <code>required int32 channel = 2 [default = 1];</code>
     */
    public boolean hasChannel() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required int32 channel = 2 [default = 1];</code>
     */
    public int getChannel() {
      return channel_;
    }

    // required int32 data1 = 3 [default = 1];
    public static final int DATA1_FIELD_NUMBER = 3;
    private int data1_;
    /**
     * <code>required int32 data1 = 3 [default = 1];</code>
     *
     * <pre>
     *Pitch or CC number
     * </pre>
     */
    public boolean hasData1() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required int32 data1 = 3 [default = 1];</code>
     *
     * <pre>
     *Pitch or CC number
     * </pre>
     */
    public int getData1() {
      return data1_;
    }

    // required int32 data2 = 4 [default = 1];
    public static final int DATA2_FIELD_NUMBER = 4;
    private int data2_;
    /**
     * <code>required int32 data2 = 4 [default = 1];</code>
     *
     * <pre>
     *Velocity or value
     * </pre>
     */
    public boolean hasData2() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required int32 data2 = 4 [default = 1];</code>
     *
     * <pre>
     *Velocity or value
     * </pre>
     */
    public int getData2() {
      return data2_;
    }

    private void initFields() {
      msgType_ = 1;
      channel_ = 1;
      data1_ = 1;
      data2_ = 1;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasMsgType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasChannel()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasData1()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasData2()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, msgType_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, channel_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, data1_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, data2_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, msgType_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, channel_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, data1_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, data2_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static SignalMessages.MidiData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SignalMessages.MidiData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SignalMessages.MidiData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SignalMessages.MidiData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SignalMessages.MidiData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static SignalMessages.MidiData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static SignalMessages.MidiData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static SignalMessages.MidiData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static SignalMessages.MidiData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static SignalMessages.MidiData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(SignalMessages.MidiData prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code MidiData}
     *
     * <pre>
     * Forward MIDI Data to Strobot
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements SignalMessages.MidiDataOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return SignalMessages.internal_static_MidiData_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return SignalMessages.internal_static_MidiData_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                SignalMessages.MidiData.class, SignalMessages.MidiData.Builder.class);
      }

      // Construct using SignalMessages.MidiData.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        msgType_ = 1;
        bitField0_ = (bitField0_ & ~0x00000001);
        channel_ = 1;
        bitField0_ = (bitField0_ & ~0x00000002);
        data1_ = 1;
        bitField0_ = (bitField0_ & ~0x00000004);
        data2_ = 1;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return SignalMessages.internal_static_MidiData_descriptor;
      }

      public SignalMessages.MidiData getDefaultInstanceForType() {
        return SignalMessages.MidiData.getDefaultInstance();
      }

      public SignalMessages.MidiData build() {
        SignalMessages.MidiData result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public SignalMessages.MidiData buildPartial() {
        SignalMessages.MidiData result = new SignalMessages.MidiData(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.msgType_ = msgType_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.channel_ = channel_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.data1_ = data1_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.data2_ = data2_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof SignalMessages.MidiData) {
          return mergeFrom((SignalMessages.MidiData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(SignalMessages.MidiData other) {
        if (other == SignalMessages.MidiData.getDefaultInstance()) return this;
        if (other.hasMsgType()) {
          setMsgType(other.getMsgType());
        }
        if (other.hasChannel()) {
          setChannel(other.getChannel());
        }
        if (other.hasData1()) {
          setData1(other.getData1());
        }
        if (other.hasData2()) {
          setData2(other.getData2());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasMsgType()) {
          
          return false;
        }
        if (!hasChannel()) {
          
          return false;
        }
        if (!hasData1()) {
          
          return false;
        }
        if (!hasData2()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        SignalMessages.MidiData parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (SignalMessages.MidiData) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required int32 msgType = 1 [default = 1];
      private int msgType_ = 1;
      /**
       * <code>required int32 msgType = 1 [default = 1];</code>
       */
      public boolean hasMsgType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 msgType = 1 [default = 1];</code>
       */
      public int getMsgType() {
        return msgType_;
      }
      /**
       * <code>required int32 msgType = 1 [default = 1];</code>
       */
      public Builder setMsgType(int value) {
        bitField0_ |= 0x00000001;
        msgType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 msgType = 1 [default = 1];</code>
       */
      public Builder clearMsgType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        msgType_ = 1;
        onChanged();
        return this;
      }

      // required int32 channel = 2 [default = 1];
      private int channel_ = 1;
      /**
       * <code>required int32 channel = 2 [default = 1];</code>
       */
      public boolean hasChannel() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int32 channel = 2 [default = 1];</code>
       */
      public int getChannel() {
        return channel_;
      }
      /**
       * <code>required int32 channel = 2 [default = 1];</code>
       */
      public Builder setChannel(int value) {
        bitField0_ |= 0x00000002;
        channel_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 channel = 2 [default = 1];</code>
       */
      public Builder clearChannel() {
        bitField0_ = (bitField0_ & ~0x00000002);
        channel_ = 1;
        onChanged();
        return this;
      }

      // required int32 data1 = 3 [default = 1];
      private int data1_ = 1;
      /**
       * <code>required int32 data1 = 3 [default = 1];</code>
       *
       * <pre>
       *Pitch or CC number
       * </pre>
       */
      public boolean hasData1() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required int32 data1 = 3 [default = 1];</code>
       *
       * <pre>
       *Pitch or CC number
       * </pre>
       */
      public int getData1() {
        return data1_;
      }
      /**
       * <code>required int32 data1 = 3 [default = 1];</code>
       *
       * <pre>
       *Pitch or CC number
       * </pre>
       */
      public Builder setData1(int value) {
        bitField0_ |= 0x00000004;
        data1_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 data1 = 3 [default = 1];</code>
       *
       * <pre>
       *Pitch or CC number
       * </pre>
       */
      public Builder clearData1() {
        bitField0_ = (bitField0_ & ~0x00000004);
        data1_ = 1;
        onChanged();
        return this;
      }

      // required int32 data2 = 4 [default = 1];
      private int data2_ = 1;
      /**
       * <code>required int32 data2 = 4 [default = 1];</code>
       *
       * <pre>
       *Velocity or value
       * </pre>
       */
      public boolean hasData2() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required int32 data2 = 4 [default = 1];</code>
       *
       * <pre>
       *Velocity or value
       * </pre>
       */
      public int getData2() {
        return data2_;
      }
      /**
       * <code>required int32 data2 = 4 [default = 1];</code>
       *
       * <pre>
       *Velocity or value
       * </pre>
       */
      public Builder setData2(int value) {
        bitField0_ |= 0x00000008;
        data2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 data2 = 4 [default = 1];</code>
       *
       * <pre>
       *Velocity or value
       * </pre>
       */
      public Builder clearData2() {
        bitField0_ = (bitField0_ & ~0x00000008);
        data2_ = 1;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:MidiData)
    }

    static {
      defaultInstance = new MidiData(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:MidiData)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_SignalLevel_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_SignalLevel_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_SignalInstantVal_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_SignalInstantVal_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_Impulse_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_Impulse_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_LinearFFT_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_LinearFFT_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_LogFFT_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_LogFFT_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_TimeInfo_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_TimeInfo_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_MidiData_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_MidiData_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\024SignalMessages.proto\":\n\013SignalLevel\022\023\n" +
      "\010signalID\030\001 \002(\005:\0011\022\026\n\013signalLevel\030\002 \002(\002:" +
      "\0010\"D\n\020SignalInstantVal\022\023\n\010signalID\030\001 \002(\005" +
      ":\0011\022\033\n\020signalInstantVal\030\002 \002(\002:\0010\"\036\n\007Impu" +
      "lse\022\023\n\010signalID\030\001 \002(\005:\0011\"N\n\tLinearFFT\022\023\n" +
      "\010signalID\030\001 \002(\005:\0011\022\032\n\017fundamentalFreq\030\002 " +
      "\002(\002:\0010\022\020\n\004data\030\003 \003(\002B\002\020\001\"\355\001\n\006LogFFT\022\023\n\010s" +
      "ignalID\030\001 \001(\005:\0011\022\027\n\017fundamentalFreq\030\002 \001(" +
      "\002\022\r\n\005band1\030\003 \001(\002\022\r\n\005band2\030\004 \001(\002\022\r\n\005band3" +
      "\030\005 \001(\002\022\r\n\005band4\030\006 \001(\002\022\r\n\005band5\030\007 \001(\002\022\r\n\005",
      "band6\030\010 \001(\002\022\r\n\005band7\030\t \001(\002\022\r\n\005band8\030\n \001(" +
      "\002\022\r\n\005band9\030\013 \001(\002\022\016\n\006band10\030\014 \001(\002\022\016\n\006band" +
      "11\030\r \001(\002\022\016\n\006band12\030\016 \001(\002\"K\n\010TimeInfo\022\030\n\t" +
      "isPlaying\030\001 \002(\010:\005false\022\020\n\005tempo\030\002 \002(\002:\0010" +
      "\022\023\n\010position\030\003 \002(\002:\0010\"V\n\010MidiData\022\022\n\007msg" +
      "Type\030\001 \002(\005:\0011\022\022\n\007channel\030\002 \002(\005:\0011\022\020\n\005dat" +
      "a1\030\003 \002(\005:\0011\022\020\n\005data2\030\004 \002(\005:\0011B\020B\016SignalM" +
      "essages"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_SignalLevel_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_SignalLevel_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_SignalLevel_descriptor,
              new java.lang.String[] { "SignalID", "SignalLevel", });
          internal_static_SignalInstantVal_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_SignalInstantVal_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_SignalInstantVal_descriptor,
              new java.lang.String[] { "SignalID", "SignalInstantVal", });
          internal_static_Impulse_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_Impulse_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_Impulse_descriptor,
              new java.lang.String[] { "SignalID", });
          internal_static_LinearFFT_descriptor =
            getDescriptor().getMessageTypes().get(3);
          internal_static_LinearFFT_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_LinearFFT_descriptor,
              new java.lang.String[] { "SignalID", "FundamentalFreq", "Data", });
          internal_static_LogFFT_descriptor =
            getDescriptor().getMessageTypes().get(4);
          internal_static_LogFFT_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_LogFFT_descriptor,
              new java.lang.String[] { "SignalID", "FundamentalFreq", "Band1", "Band2", "Band3", "Band4", "Band5", "Band6", "Band7", "Band8", "Band9", "Band10", "Band11", "Band12", });
          internal_static_TimeInfo_descriptor =
            getDescriptor().getMessageTypes().get(5);
          internal_static_TimeInfo_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_TimeInfo_descriptor,
              new java.lang.String[] { "IsPlaying", "Tempo", "Position", });
          internal_static_MidiData_descriptor =
            getDescriptor().getMessageTypes().get(6);
          internal_static_MidiData_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_MidiData_descriptor,
              new java.lang.String[] { "MsgType", "Channel", "Data1", "Data2", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
